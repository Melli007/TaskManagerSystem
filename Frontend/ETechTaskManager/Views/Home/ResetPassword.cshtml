@{
    ViewData["Title"] = "Reset Password";
}

@section ResetPassCss
{
    <style>
        .main-container {
            margin-left: 380px;
            padding: 0;
            font-family: Arial, sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 90vh;
        }

        .containerR {
            max-width: 400px;
            width: 100%;
            background-color: #fff;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
            text-align: center;
        }

        h2 {
            font-size: 1.875rem;
            font-weight: 700;
            color: #343a40;
            margin-bottom: 20px;
        }

        hr {
            border: none;
            height: 1px;
            background-color: #dee2e6;
            margin: 20px 0;
        }

        /* Form Styles */
        form {
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        label {
            text-align: left;
            font-size: 0.875rem;
            font-weight: 600;
            color: #495057;
        }

        input[type="password"] {
            width: 100%;
            padding: 12px;
            border: 1px solid #ced4da;
            border-radius: 5px;
            font-size: 1rem;
            outline: none;
            transition: border-color 0.2s ease, box-shadow 0.2s ease;
        }

            input[type="password"]:focus {
                border-color: #007bff;
                box-shadow: 0 0 4px rgba(0, 123, 255, 0.5);
            }

        button {
            display: inline-block;
            width: 100%;
            padding: 12px;
            font-size: 1rem;
            font-weight: 600;
            color: #fff;
            background-color: #007bff;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s ease, box-shadow 0.2s ease;
        }

            button:hover {
                background-color: #0056b3;
            }

            button:focus {
                box-shadow: 0 0 4px rgba(0, 123, 255, 0.5);
                outline: none;
            }

        /* Alert Styles */
        .alert {
            padding: 12px;
            border-radius: 5px;
            font-size: 0.875rem;
            font-weight: 600;
            margin-top: 20px;
            text-align: center;
        }

        .alert-error {
            background-color: #f8d7da;
            border: 1px solid #f5c6cb;
            color: #721c24;
        }

        .alert-success {
            background-color: #d4edda;
            border: 1px solid #c3e6cb;
            color: #155724;
        }

        /* Custom styling for the password requirements list */
        #passwordHelp {
            font-size: 0.9rem;
            margin-top: 10px;
            color: #6c757d;
        }

        .password-requirements {
            list-style-type: none;
            padding: 0;
            margin: 0;
        }

            .password-requirements li {
                padding-left: 1.25rem;
                position: relative;
                font-size: 0.875rem;
                padding-top: 5px;
            }

                .password-requirements li:before {
                    content: "\2022"; /* Bullet point symbol */
                    font-size: 1.5rem;
                    position: absolute;
                    left: 0;
                    top: 0;
                    color: #f5c6cb;
                }

            .password-requirements .valid {
                color: #28a745; /* Green for valid */
            }

            .password-requirements .invalid {
                color: #dc3545; /* Red for invalid */
            }

    </style>
}

<div class="main-container">
    <div class="containerR">
        <h2>Reset Password</h2>
        <hr />

        <form method="post">
            <!-- Hidden Field for Reset Key -->
            <input type="hidden" name="resetKey" value="@ViewData["ResetKey"]" />

            <div>
                <label for="newPassword">New Password:</label>
                <input type="password" id="newPassword" name="newPassword" required />

                <!-- Password Strength Requirements -->
                <small id="passwordHelp" class="form-text">
                    <ul class="password-requirements">
                        <li id="lengthCheck" class="invalid">At least 12 characters</li>
                        <li id="uppercaseCheck" class="invalid">At least one uppercase letter</li>
                        <li id="lowercaseCheck" class="invalid">At least one lowercase letter</li>
                        <li id="digitCheck" class="invalid">At least one digit</li>
                    </ul>
                </small>
            </div>

            <!-- Submit Button (Initially Disabled) -->
            <button type="submit" id="resetPasswordBtn" disabled>Reset Password</button>
        </form>

        @if (ViewData["Error"] != null)
        {
            <div class="alert alert-error">@ViewData["Error"]</div>
        }
        @if (ViewData["Success"] != null)
        {
            <div class="alert alert-success">@ViewData["Success"]</div>
        }
    </div>
</div>

@section Scripts
{
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const submitButton = document.getElementById('resetPasswordBtn');  // Get the submit button
            const passwordInput = document.getElementById('newPassword'); // Get the password input

            // Disable the submit button by default
            submitButton.disabled = true;

            // Add event listener for input in the password field
            passwordInput.addEventListener('input', function () {
                const password = this.value; // Get the value of the password

                // Validate password criteria
                const lengthCheck = password.length >= 12;
                const uppercaseCheck = /[A-Z]/.test(password);
                const lowercaseCheck = /[a-z]/.test(password);
                const digitCheck = /\d/.test(password);

                // Update the UI with validity status
                document.getElementById('lengthCheck').classList.toggle('valid', lengthCheck);
                document.getElementById('lengthCheck').classList.toggle('invalid', !lengthCheck);

                document.getElementById('uppercaseCheck').classList.toggle('valid', uppercaseCheck);
                document.getElementById('uppercaseCheck').classList.toggle('invalid', !uppercaseCheck);

                document.getElementById('lowercaseCheck').classList.toggle('valid', lowercaseCheck);
                document.getElementById('lowercaseCheck').classList.toggle('invalid', !lowercaseCheck);

                document.getElementById('digitCheck').classList.toggle('valid', digitCheck);
                document.getElementById('digitCheck').classList.toggle('invalid', !digitCheck);

                // Enable the submit button only if all criteria are met
                if (lengthCheck && uppercaseCheck && lowercaseCheck && digitCheck) {
                    submitButton.disabled = false;  // Enable button if all checks are valid
                } else {
                    submitButton.disabled = true;  // Keep button disabled if any check fails
                }
            });
        });
    </script>
}
