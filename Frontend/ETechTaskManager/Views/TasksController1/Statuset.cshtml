@model IEnumerable<ETechTaskManager.Models.TasksViewModel>

@{
    ViewData["Title"] = "Task Index";
    int counter = 0;
    int i = 1;
}

<style>
    /* Table styling */
    .content-table {
        border-collapse: collapse;
        margin: 25px 5% 5% 5%;
        font-size: 0.9em;
        min-width: 400px;
        border-radius: 5px 5px 0 0;
        overflow: hidden;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.15);
    }

    .content-table thead tr {
        background-color: #e9e9e9;
        text-align: left;
        font-weight: bold;
    }

    .content-table th, .content-table td {
        padding: 12px 15px;
    }

    .content-table tbody tr {
        border-bottom: 1px solid #dddddd;
    }

    .content-table tbody tr:nth-of-type(even) {
        background-color: #f3f3f3;
    }

    .content-table tbody tr:last-of-type {
        border-bottom: 2px solid #0077cc;
    }

    .content-table tbody tr.active-row {
        font-weight: bold;
        color: #00BFFF;
    }

    /* Dropdown styling */
    .dropbtn {
        background-color: #0077cc;
        color: white;
        padding: 10px 16px;
        font-size: 14px;
        border: none;
        cursor: pointer;
        border-radius: 4px;
    }

        .dropbtn:hover, .dropbtn:focus {
            background-color: #2980B9;
        }

    .dropdown {
        display: inline-block;
    }

    .dropdown-content {
        display: none;
        position: absolute;
        background-color: #f1f1f1;
        min-width: auto;
        overflow: auto;
        box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
        z-index: 1;
        border-radius: 4px;
    }

        .dropdown-content a {
            color: black;
            padding: 12px 9px;
            text-decoration: none;
            display: block;
        }

            .dropdown-content a:hover {
                background-color: #ddd;
            }

    .show {
        display: block;
    }

    .table-title {
        padding-bottom: 15px;
        background: #0077cc;
        color: #fff;
        padding: 16px 30px;
        margin: -20px -25px 10px;
        border-radius: 3px 3px 0 0;
    }

        .table-title h2 {
            margin: 5px 0 0;
            font-size: 24px;
        }

        .table-title .btn {
            color: #566787;
            float: right;
            font-size: 16px;
            background: #fff;
            border: none;
            min-width: 50px;
            border-radius: 2px;
            border: none;
            outline: none !important;
            margin-left: 10px;
        }

            .table-title .btn:hover, .table-title .btn:focus {
                color: #566787;
                background: #f2f2f2;
            }

            .table-title .btn i {
                float: left;
                font-size: 21px;
                margin-right: 5px;
            }

            .table-title .btn span {
                float: right;
                margin-top: 2px;
            }

    .download-icon {
        transition: fill 0.3s ease;
        fill: #000000; /* Default color */
    }

        .download-icon:hover {
            fill: #0077cc; /* Hover color */
        }
    /* Dropdown Container */
    .filter-dropdown {
        position: relative;
        display: flex;
        justify-content: right;
        margin: 20px 57px 0px 0px;
    }

    /* Dropdown Button */
    .filter-dropbtn {
        display: flex;
        align-items: center;
        padding: 0.5rem 1rem;
        font-size: 0.875rem;
        font-weight: 500;
        color: white;
        background-color: #2563eb; /* Blue-600 */
        border: none;
        border-radius: 0.375rem; /* Rounded-lg */
        cursor: pointer;
        transition: background-color 0.2s ease;
    }

        .filter-dropbtn:hover {
            background-color: #1d4ed8; /* Blue-700 */
        }

        .filter-dropbtn:focus {
            outline: none;
            box-shadow: 0 0 0 2px rgba(37, 99, 235, 0.5); /* Focus ring */
        }

    /* Dropdown Icon */
    .dropdown-icon {
        width: 1rem;
        height: 1rem;
        margin-left: 0.5rem;
    }

    /* Dropdown Content */
    .filter-dropdown-content {
        position: absolute;
        right: 0;
        z-index: 10;
        display: none; /* Hidden by default */
        width: 16rem; /* 64 */
        padding: 1rem;
        margin-top: 2.2rem;
        background-color: white;
        border: 1px solid #e5e7eb; /* Gray-200 */
        border-radius: 0.5rem; /* Rounded-lg */
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* Shadow-lg */
    }

        /* Show Dropdown Content */
        .filter-dropdown-content.show {
            display: block;
        }

    /* Filter Form */
    .filter-form {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    /* Filter Group */
    .filter-group {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

        .filter-group label {
            font-size: 0.875rem;
            font-weight: 500;
            color: #374151; /* Gray-700 */
        }

        /* Input and Select Styles */
        .filter-group select,
        .filter-group input[type="date"] {
            padding: 0.5rem 0.75rem;
            font-size: 0.875rem;
            color: #374151; /* Gray-700 */
            background-color: white;
            border: 1px solid #d1d5db; /* Gray-300 */
            border-radius: 0.375rem; /* Rounded-md */
            box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05); /* Shadow-sm */
            transition: border-color 0.2s ease, box-shadow 0.2s ease;
        }

            .filter-group select:focus,
            .filter-group input[type="date"]:focus {
                outline: none;
                border-color: #2563eb; /* Blue-600 */
                box-shadow: 0 0 0 2px rgba(37, 99, 235, 0.5); /* Focus ring */
            }

    /* Checkbox Style */
    .checkbox-label {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 0.875rem;
        font-weight: 500;
        color: #374151; /* Gray-700 */
    }

        .checkbox-label input[type="checkbox"] {
            width: 1rem;
            height: 1rem;
            color: #2563eb; /* Blue-600 */
            border: 1px solid #d1d5db; /* Gray-300 */
            border-radius: 0.25rem; /* Rounded */
            cursor: pointer;
        }

            .checkbox-label input[type="checkbox"]:focus {
                outline: none;
                box-shadow: 0 0 0 2px rgba(37, 99, 235, 0.5); /* Focus ring */
            }

    /* Submit Button */
    .btn-filter {
        padding: 0.5rem 1rem;
        font-size: 0.875rem;
        font-weight: 500;
        color: white;
        background-color: #2563eb; /* Blue-600 */
        border: none;
        border-radius: 0.375rem; /* Rounded-md */
        cursor: pointer;
        transition: background-color 0.2s ease;
    }

        .btn-filter:hover {
            background-color: #1d4ed8; /* Blue-700 */
        }

        .btn-filter:focus {
            outline: none;
            box-shadow: 0 0 0 2px rgba(37, 99, 235, 0.5); /* Focus ring */
        }
</style>

<!-- Filter Section -->
<div class="filter-dropdown">
    <!-- Dropdown Button -->
    <button onclick="toggleFilterDropdown()" class="filter-dropbtn">
        <span>Filtrimet</span>
        <svg class="dropdown-icon" width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M19 9L12 16L5 9" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
        </svg>
    </button>

    <!-- Dropdown Content -->
    <div id="filter-dropdown-content" class="filter-dropdown-content">
        <form method="get" class="filter-form">

            <!-- Preserve the status if present -->
            <input type="hidden" name="status" value="@Context.Request.Query["status"]" />
            <!-- Preserve dueDate if you want to keep "Pa Deadline" after re-filtering -->
            <input type="hidden" name="dueDate" value="@Context.Request.Query["dueDate"]" />

            <!-- Sort Order -->
            <div class="filter-group">
                <label for="sortOrder">Rendit sipas datës krijimit:</label>
                <select id="sortOrder" name="sortOrder">
                    <option value="" selected="@(string.IsNullOrEmpty(Context.Request.Query["sortOrder"]) ? "selected" : null)">Asnjë</option>
                    <option value="asc" selected="@(Context.Request.Query["sortOrder"] == "asc" ? "selected" : null)">ASC</option>
                    <option value="desc" selected="@(Context.Request.Query["sortOrder"] == "desc" ? "selected" : null)">DESC</option>
                </select>
            </div>

            <!-- Date Range: Start -->
            <div class="filter-group">
                <label for="startDate">Nga data:</label>
                <input type="date" id="startDate" name="startDate" value="@Context.Request.Query["startDate"]" />
            </div>

            <!-- Date Range: End -->
            <div class="filter-group">
                <label for="endDate">Deri më:</label>
                <input type="date" id="endDate" name="endDate" value="@Context.Request.Query["endDate"]" />
            </div>

            <!-- High Priority Filter -->
            @if (!(Context.Request.Query["status"] == "Të Përfunduara"
            || Context.Request.Query["status"] == "Të Vonuara"
            || Context.Request.Query["dueDate"] == "null"))
            {
                <div class="filter-group">
                    <label for="highPriority" class="checkbox-label">
                        <input type="checkbox" id="highPriority" name="highPriority" value="true"
                        @(Context.Request.Query["highPriority"] == "true" ? "checked" : "") />
                        <span>High Priority</span>
                    </label>
                </div>
            }

            <!-- Conditionally show the "Këtë javë" checkbox ONLY if status == "Të Përfunduara" -->
            @if (Context.Request.Query["status"] == "Të Përfunduara")
            {
                <div class="filter-group">
                    <label for="weeklyCompleted" class="checkbox-label">
                        <input type="checkbox" name="weeklyCompleted" value="true"
                        @(Context.Request.Query["weeklyCompleted"] == "true" ? "checked" : "") />
                        <span>Këtë javë</span>
                    </label>
                </div>
            }

            <!-- Submit Button -->
            <button type="submit" class="btn-filter">Filtro</button>
        </form>
    </div>
</div>

<table class="content-table">
    <thead>
        <tr>
            <th colspan="12" class="table-title">
                <h2>Lista e Detyrave: <b>@ViewBag.Status</b></h2>
            </th>
        </tr>
        <tr>
            <th>#</th>
            <th>Titulli</th>
            <th>Deskripcioni</th>
            <th>Caktuar Për</th>
            <th>Statusi</th>
            <th>Data Krijimit</th>
            <th>Data Mbarimit</th>
            <th>Krijuar Nga</th>
            <th>Files</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
          @if (Model != null && Model.Any())
        {
        @foreach (var item in Model)
        {
            string rowClass = (counter % 2 == 1) ? "active-row" : "inactive-row"; // Alternating classes
            <tr class="@rowClass">
                <td>@(i)</td>
                <td>@Html.DisplayFor(modelItem => item.Title)</td>
                <td>@Html.DisplayFor(modelItem => item.Description)</td>
                <td>@Html.DisplayFor(modelItem => item.AssignedToName)</td>
                <td>@Html.DisplayFor(modelItem => item.Status)</td>
                <td>@Html.DisplayFor(modelItem => item.CreatedAt)</td>
                <td>@Html.DisplayFor(modelItem => item.DueDateDisplay)</td>
                <td>@Html.DisplayFor(modelItem => item.CreatedByName)</td>
                    <td>
                        @if (!string.IsNullOrEmpty(item.FilePath))
                        {
                            <a asp-action="DownloadFile" asp-route-taskId="@item.Id" class="btn btn-primary" title="Download File">
                                <svg fill="currentColor" height="24px" width="24px" version="1.1" id="Capa_1" class="download-icon" style="margin-left: 20;" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
                                     viewBox="0 0 29.978 29.978" xml:space="preserve">
                                <g>
                                <path d="M25.462,19.105v6.848H4.515v-6.848H0.489v8.861c0,1.111,0.9,2.012,2.016,2.012h24.967c1.115,0,2.016-0.9,2.016-2.012	v-8.861H25.462z" />
                                <path d="M14.62,18.426l-5.764-6.965c0,0-0.877-0.828,0.074-0.828s3.248,0,3.248,0s0-0.557,0-1.416c0-2.449,0-6.906,0-8.723
		c0,0-0.129-0.494,0.615-0.494c0.75,0,4.035,0,4.572,0c0.536,0,0.524,0.416,0.524,0.416c0,1.762,0,6.373,0,8.742
		c0,0.768,0,1.266,0,1.266s1.842,0,2.998,0c1.154,0,0.285,0.867,0.285,0.867s-4.904,6.51-5.588,7.193
		C15.092,18.979,14.62,18.426,14.62,18.426z" /><g></svg>
                                Download
                            </a>
                        }
                        else
                        {
                            <span>Nuk Ka File</span>
                        }
                    </td>
                    <td>
                        <div class="dropdown">
                            <button onclick="toggleDropdown('@item.Id')" class="dropbtn">
                                <i class="fa fa-bars" aria-hidden="true"></i>
                            </button>
                            <div id="dropdown-@item.Id" class="dropdown-content">
                                @Html.ActionLink("Edit", "Edit", new { id = item.Id })
                                @Html.ActionLink("Delete", "Delete", new { id = item.Id })
                            </div>
                        </div>
                    </td>
                </tr>
                counter++;
                i++;
            }
        }
        else
        {
            <tr>
                <td colspan="7" class="text-center">Nuk u gjet asnjë task.</td>
            </tr>
        }
    </tbody>
</table>

<script>
    function toggleFilterDropdown() {
        const filterDropdown = document.getElementById("filter-dropdown-content");
        const dropdownIcon = document.querySelector(".filter-dropbtn svg");

        // Toggle the dropdown visibility
        filterDropdown.classList.toggle("show");

        // Rotate the dropdown icon
        if (filterDropdown.classList.contains("show")) {
            dropdownIcon.style.transform = "rotate(180deg)";
        } else {
            dropdownIcon.style.transform = "rotate(0deg)";
        }
    }

    // Close the dropdown if the user clicks outside of it
    document.addEventListener("click", function (event) {
        const filterDropdown = document.getElementById("filter-dropdown-content");
        const dropdownButton = document.querySelector(".filter-dropbtn");
        const dropdownIcon = document.querySelector(".filter-dropbtn svg");

        // Check if the click is outside the dropdown and button
        if (!event.target.closest(".filter-dropdown")) {
            // Hide the dropdown
            filterDropdown.classList.remove("show");

            // Reset the dropdown icon rotation
            dropdownIcon.style.transform = "rotate(0deg)";
        }
    });

    function toggleDropdown(id) {
        document.getElementById("dropdown-" + id).classList.toggle("show");
    }

    window.onclick = function (event) {
        if (!event.target.closest('.dropbtn')) {
            var dropdowns = document.getElementsByClassName("dropdown-content");
            for (var i = 0; i < dropdowns.length; i++) {
                var openDropdown = dropdowns[i];
                if (openDropdown.classList.contains('show')) {
                    openDropdown.classList.remove('show');
                }
            }
        }
    }
</script>
